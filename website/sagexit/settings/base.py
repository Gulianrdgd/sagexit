"""
Django settings for sagexit project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", ".."))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "sass_processor",
    "bootstrap4",
    "saml2_pro_auth",
    "sagexit",
    "users",
    "room_reservation",
]

AUTHENTICATION_BACKENDS = ["saml2_pro_auth.auth.Backend"]

SAML_REDIRECT = "/"

SAML_USERS_MAP = {"ruscience": {"email": dict(key="Email", index=0), "name": dict(key="Username", index=0)}}
SAML_OVERRIDE_HOSTNAME = "reservations.thalia.nu"

SAML_ROUTE = "/sso/saml/"

SAML_PROVIDERS = {
    "ruscience": {
        "strict": False,
        "debug": True,
        "custom_base_path": "",  # Optional, set if you are reading files from a custom location on disk
        "lowercase_urlencoding": False,  # This can be set to True to enable ADFS compatibility
        "idp_initiated_auth": True,  # This can be set to False to disable IdP-initiated auth
        "sp": {
            "entityId": "https://reservations.thalia.nu/sso/saml/ruscience",
            "assertionConsumerService": {
                "url": "https://reservations.thalia.nu/sso/saml/ruscience/acs",
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST",
            },
            "singleLogoutService": {
                "url": "https://reservations.thalia.nu/sso/saml/ruscience/sls",
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
            },
            "NameIDFormat": "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
            ## For the cert/key you can place their content in
            ## the x509cert and privateKey params
            ## as single-line strings or place them in
            ## certs/sp.key and certs/sp.crt or you can supply a
            ## path via custom_base_path which should contain
            ## sp.crt and sp.key
            # "x509cert": "",
            # "privateKey": "",
        },
        "idp": {
            "entityId": "https://signon.science.ru.nl/simplesaml/saml2/idp/SSOService.php",
            "singleSignOnService": {
                "url": "https://signon.science.ru.nl/simplesaml/saml2/idp/SSOService.php",
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
            },
            "singleLogoutService": {
                "url": "https://signon.science.ru.nl/simplesaml/saml2/idp/SingleLogoutService.php",
                "binding": "urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect",
            },
            # "x509cert": open(os.path.join(BASE_DIR,'certs/MyProvider.crt'), 'r').read(),
        },
        "organization": {
            "en-US": {"name": "example inc", "displayname": "Example Incorporated", "url": "example.com"}
        },
        "contactPerson": {
            "technical": {"givenName": "Jane Doe", "emailAddress": "jdoe@examp.com"},
            "support": {"givenName": "Jane Doe", "emailAddress": "jdoe@examp.com"},
        },
        "security": {
            "nameIdEncrypted": False,
            "authnRequestsSigned": False,
            "logoutRequestSigned": False,
            "logoutResponseSigned": False,
            "signMetadata": False,
            "wantMessagesSigned": False,
            "wantAssertionsSigned": False,
            "wantAssertionsEncrypted": False,
            "wantNameId": False,
            "wantNameIdEncrypted": False,
            "wantAttributeStatement": False,
            # Algorithm that the toolkit will use on signing process. Options:
            #    'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
            #    'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
            #    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
            #    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
            #    'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
            "signatureAlgorithm": "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
            # Algorithm that the toolkit will use on digest process. Options:
            #    'http://www.w3.org/2000/09/xmldsig#sha1'
            #    'http://www.w3.org/2001/04/xmlenc#sha256'
            #    'http://www.w3.org/2001/04/xmldsig-more#sha384'
            #    'http://www.w3.org/2001/04/xmlenc#sha512'
            "digestAlgorithm": "http://www.w3.org/2001/04/xmlenc#sha256",
        },
    }
}


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "sagexit.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# SASS processor variables
SASS_PROCESSOR_INCLUDE_DIRS = [
    os.path.join(BASE_DIR, "sagexit/static/scss"),
    os.path.join(BASE_DIR, "room_reservation/static/scss"),
]

SASS_PRECISION = 8
SASS_PROCESSOR_ENABLED = True
SASS_OUTPUT_STYLE = "compressed"

STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "sass_processor.finders.CssFinder",
]

BOOTSTRAP4 = {
    "error_css_class": "",
    "success_css_class": "",
}

WSGI_APPLICATION = "sagexit.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Amsterdam"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/


LOGIN_URL = "/users/login"

OPENID_RETURN_URL = "verify"
OPENID_SERVER_ENDPOINT = "https://openid.science.ru.nl/openid-server"
OPENID_USERNAME_PREFIX = "http://openid.science.ru.nl/"
OPENID_USERNAME_POSTFIX = "/"
